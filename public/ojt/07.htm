<!DOCTYPE html>
<html lang="ko">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta name="mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-capable" content="yes">
<title>Valhalla Project</title>
<link rel="canonical" href="http://n.mp1.co.kr/">
<link rel="apple-touch-icon-precomposed" href="/favicon.ico">
<link rel="shortcut icon" href="/favicon.ico">
<link rel="stylesheet" href="/css/style.css" type="text/css" media="all">
<style>
#articlecontent ul {list-style-type:disc;margin-left:16px;}
#articlecontent p {margin-bottom:30px;}
.question {cursor:pointer;font-weight:bold;}
.answer {display:none;padding-bottom:30px;}

</style>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js" type="text/javascript"></script>
<script src="/js/common.js" type="text/javascript"></script>
<script src="/ojt/menu.js" type="text/javascript"></script>
<script src="/js/SpeechText.js" type="text/javascript"></script>
</head>
<body>
<div id="section_pop_menu"><script>getMenu();</script></div>
<div id="container">
<div id="header">
	<div id="section_logo">
	  <img id="menu" src="/images/btnBurger.png" onclick="controlPopMenu();return false;" alt="메뉴열기" title="메뉴열기"><span id="domain">VALHALLA</span>
	</div>
</div>
<div id="section_top_navigation"></div>
<div id="alert"></div>
<div id="article">
	<div id="section_left"></div>
	<div id="section_location"></div>
	<div id="section_body">
		<h1>데이터베이스(Database)</h1>
		<div><a class='btn' onclick='speakStart();return false;'>소리내어 읽기</a><a class='btn' onclick='speakStop();return false;'>그만읽기</a></div>
		<div>&nbsp;</div>
		<div id="articlecontent">

<p>데이터베이스는 <b>체계화된 데이터 모임</b>입니다. 데이터를 '체계적'으로 저장할 수 있는 <b>구조</b>와 <b>절차</b>를 고려해 <b>설계(Modeling)</b>해서 저장해야 한다는 얘기입니다. 
구조적으로 <b>일관성</b>과 <b>무결성</b>이 정말로 중요하고, 할 수 있는 최대한의 보안을 유지하도록 해야 합니다.  
개발자들이 "무결성이 깨진다"라고 볼멘 소리를 하고 있으면, "아, 요청하면 안되는구나"라고 생각하셔도 대부분 무방하십니다.

<ul>
	<li>
		<a class='question'>관계형 데이터베이스(RDB; Relational Database), SQL(Structured Query Language), 쿼리(Query) </a>
		<div class='answer'>
			<b>키(Key)</b>와 <b>값(Value)</b>으로 이루어진 <b>테이블(Table)</b>, 테이블과 테이블 간 키로 연결되는 <b>관계(Relationship; 보통 '닭발'로 부릅니다)</b>로 구성되는 데이터베이스를 의미합니다.
			<img class='lazyload' src='http://www.dbguide.net/publishing/img/knowledge/SQL_156.jpg'>
			<p>관계형 데이터베이스에서 데이터를 가져오기 위한 언어가 따로 있습니다. <b>SQL(Structured Query Language)</b>이 그겁니다. 스퀄로 발음해야 되는데, 에스큐엘로 더 많이 씁니다.
			위의 예제로 '스틸러스'의 선수명단을 가져오자면, 
			<pre>
				SELECT B.팀명, A.이름, A.포지션
				  FROM 선수테이블 A
				 INNER JOIN 구단테이블 B ON B.팀코드 = A.팀코드
				 WHERE B.팀명 = '스틸러스'
			</pre>
			이렇게 됩니다. 이런 걸 '<b>쿼리(Query)</b>'라 하고, 쿼리를 작성하는 걸 보통 '<b>쿼리를 짠다</b>'라고 표현합니다.
		</div>
	</li>
	<li>
		<a class='question'>DBMS(Database Management System) </a>
		<div class='answer'>
			말그대로 데이터베이스 관리 시스템 혹은 프로그램입니다. 대표적인 것이 <b>오라클(Oracle)</b>, <b>IBM DB2</b>, <b>MySQL</b>, <b>SQL Server</b>(보통은 MS-SQL이라 부름) 등입니다. 모두 관계형데이터베이스입니다.
			<img class='lazyload' src='https://upload.wikimedia.org/wikipedia/commons/6/67/DatabasesMarketShares-2015-05.png'>
		</div>
	</li>
	<li>
		<a class='question'>C.R.U.D. </a>
		<div class='answer'>
			데이터의 <b>입력(Create)</b>, <b>조회(Read)</b>, <b>수정(Upldate)</b>, <b>삭제(Delete)</b>를 CRUD로 줄여 표현합니다. 
		</div>
	</li>
	<li>
		<a class='question'>Lock, Deadlock, Kill </a>
		<div class='answer'>
			개발자들이 "락걸렸다", "킬시켜", "락풀어" 소리지르면, 아무 말도 시키면 안됩니다. 그만큼 해결하기 어렵고 크리티컬합니다.
			<br>'락'은 한마디로 무슨 문제가 있어서 데이터베이스가 잠겨버렸다, 잠겨서 헤어나올 수 없다, '킬'은 그런 프로세스를 죽여버리는 걸 말합니다. 
		</div>
	</li>
	<li>
		<a class='question'>트랜잭션(Transaction) </a>
		<div class='answer'>
			예를 들어, 이체를 하면 통장에서 인출되고, 다른 은행의 통장에 입금되어야 합니다. 만약 입금이 되지 않았다면 인출되지 말아야 합니다. 인출되지 않았다면 입금되지도 않아야 합니다. 이처럼 두 가지의 서로 다른 일을 하나의 작업으로 오류없이 처리하는 작업단위를 <b>트랜잭션</b>이라 합니다. 
			같은 이유로 Lock이 자주 발생하기 때문에, 이걸 짤때는 예민해집니다.
		</div>
	</li>
	<li>
		<a class='question'>스토어드 프로시저(Stored Procedure) </a>
		<div class='answer'>
			프로시저로 줄여 부르기도 합니다. 여러개의 <b>쿼리(Query)</b>를 순차적으로 한번에 써야할 경우에 사용합니다. 
			개발자들이 '프로시저에 문제가 있다'고 얘기하면, '스토어드 프로시저를 잘못 짰구나, 고생해라' 생각하시면 됩니다. 
		</div>
	</li>
</ul>

<div>&nbsp;</div>

		</div>
	</div>
<div id="section_right"></div>
</div>
<div id="footer">
	<div id="copyright">COPYRIGHTⓒ<b>VALHALLA</b>. ALL RIGHTS RESERVED.</div>
	</div>
</div>
<div id="bottom">
	<img id='goprevarticle' src='/images/prev.png' onclick="location.href='06.htm';">
	<img id='gonextarticle' src='/images/next.png' onclick="location.href='08.htm';">

</div>
<img id="gotop" src="/images/top.png" onclick="goTop();" alt="go top" title="go top">
<script src="/js/onloaded.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.lazyload/1.9.1/jquery.lazyload.min.js" type="text/javascript"></script>
</body>
</html>